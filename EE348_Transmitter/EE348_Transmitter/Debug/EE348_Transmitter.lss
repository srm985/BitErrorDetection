
EE348_Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006b4  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000097b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004e1  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000209  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000317  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000187  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024c  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	85 d0       	rcall	.+266    	; 0x13a <main>
  30:	c3 c0       	rjmp	.+390    	; 0x1b8 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <TxChar_Raw>:
	}
}


void TxChar_Raw(unsigned char address, unsigned char data)
{	
  34:	cf 93       	push	r28
  36:	df 93       	push	r29
  38:	c8 2f       	mov	r28, r24
  3a:	d6 2f       	mov	r29, r22
	UART_PutChar(0xAA);
  3c:	8a ea       	ldi	r24, 0xAA	; 170
  3e:	b8 d0       	rcall	.+368    	; 0x1b0 <UART_PutChar>
	UART_PutChar(0xAA);
  40:	8a ea       	ldi	r24, 0xAA	; 170
  42:	b6 d0       	rcall	.+364    	; 0x1b0 <UART_PutChar>
	UART_PutChar(address);
  44:	8c 2f       	mov	r24, r28
  46:	b4 d0       	rcall	.+360    	; 0x1b0 <UART_PutChar>
	UART_PutChar(address);
  48:	8c 2f       	mov	r24, r28
  4a:	b2 d0       	rcall	.+356    	; 0x1b0 <UART_PutChar>
	UART_PutChar(data);
  4c:	8d 2f       	mov	r24, r29
  4e:	b0 d0       	rcall	.+352    	; 0x1b0 <UART_PutChar>
	return;
}
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	08 95       	ret

00000056 <TxChar_Encoded>:


void TxChar_Encoded(unsigned char address, unsigned char data)
{
  56:	1f 93       	push	r17
  58:	cf 93       	push	r28
  5a:	df 93       	push	r29
  5c:	cd b7       	in	r28, 0x3d	; 61
  5e:	dd 27       	eor	r29, r29
  60:	c0 51       	subi	r28, 0x10	; 16
  62:	cd bf       	out	0x3d, r28	; 61
  64:	18 2f       	mov	r17, r24
	unsigned char dataCodes[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  66:	fe 01       	movw	r30, r28
  68:	31 96       	adiw	r30, 0x01	; 1
  6a:	80 e1       	ldi	r24, 0x10	; 16
  6c:	df 01       	movw	r26, r30
  6e:	1d 92       	st	X+, r1
  70:	8a 95       	dec	r24
  72:	e9 f7       	brne	.-6      	; 0x6e <TxChar_Encoded+0x18>
	unsigned char tmp = 0;
	
	for(int i = 0; i <= 7; i++)
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
	{
		tmp = ((address >> i) & 0x01);
  78:	a1 2f       	mov	r26, r17
  7a:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dataCodes[i] = 0x00;
		}
		else if(tmp == 0x01)
		{
			dataCodes[i] = 0xFF;
  7c:	9f ef       	ldi	r25, 0xFF	; 255
	unsigned char dataCodes[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	unsigned char tmp = 0;
	
	for(int i = 0; i <= 7; i++)
	{
		tmp = ((address >> i) & 0x01);
  7e:	ad 01       	movw	r20, r26
  80:	02 2e       	mov	r0, r18
  82:	02 c0       	rjmp	.+4      	; 0x88 <TxChar_Encoded+0x32>
  84:	55 95       	asr	r21
  86:	47 95       	ror	r20
  88:	0a 94       	dec	r0
  8a:	e2 f7       	brpl	.-8      	; 0x84 <TxChar_Encoded+0x2e>
		
		if(tmp == 0x00)
  8c:	84 2f       	mov	r24, r20
  8e:	81 70       	andi	r24, 0x01	; 1
  90:	40 fd       	sbrc	r20, 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <TxChar_Encoded+0x42>
		{
			dataCodes[i] = 0x00;
  94:	10 82       	st	Z, r1
  96:	03 c0       	rjmp	.+6      	; 0x9e <TxChar_Encoded+0x48>
		}
		else if(tmp == 0x01)
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	09 f4       	brne	.+2      	; 0x9e <TxChar_Encoded+0x48>
		{
			dataCodes[i] = 0xFF;
  9c:	90 83       	st	Z, r25
void TxChar_Encoded(unsigned char address, unsigned char data)
{
	unsigned char dataCodes[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	unsigned char tmp = 0;
	
	for(int i = 0; i <= 7; i++)
  9e:	2f 5f       	subi	r18, 0xFF	; 255
  a0:	3f 4f       	sbci	r19, 0xFF	; 255
  a2:	31 96       	adiw	r30, 0x01	; 1
  a4:	28 30       	cpi	r18, 0x08	; 8
  a6:	31 05       	cpc	r19, r1
  a8:	51 f7       	brne	.-44     	; 0x7e <TxChar_Encoded+0x28>
  aa:	fe 01       	movw	r30, r28
  ac:	39 96       	adiw	r30, 0x09	; 9
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	
	for(int i = 0; i <= 7; i++)
	{
		tmp = ((data >> i) & 0x01);
  b2:	70 e0       	ldi	r23, 0x00	; 0
		{
			dataCodes[i+8] = 0x00;
		}
		else if(tmp == 0x01)
		{
			dataCodes[i+8] = 0xFF;
  b4:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}
	
	for(int i = 0; i <= 7; i++)
	{
		tmp = ((data >> i) & 0x01);
  b6:	ab 01       	movw	r20, r22
  b8:	02 2e       	mov	r0, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <TxChar_Encoded+0x6a>
  bc:	55 95       	asr	r21
  be:	47 95       	ror	r20
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <TxChar_Encoded+0x66>
		
		if(tmp == 0x00)
  c4:	84 2f       	mov	r24, r20
  c6:	81 70       	andi	r24, 0x01	; 1
  c8:	40 fd       	sbrc	r20, 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <TxChar_Encoded+0x7a>
		{
			dataCodes[i+8] = 0x00;
  cc:	10 82       	st	Z, r1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <TxChar_Encoded+0x80>
		}
		else if(tmp == 0x01)
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	09 f4       	brne	.+2      	; 0xd6 <TxChar_Encoded+0x80>
		{
			dataCodes[i+8] = 0xFF;
  d4:	90 83       	st	Z, r25
		{
			dataCodes[i] = 0xFF;
		}
	}
	
	for(int i = 0; i <= 7; i++)
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	31 96       	adiw	r30, 0x01	; 1
  dc:	28 30       	cpi	r18, 0x08	; 8
  de:	31 05       	cpc	r19, r1
  e0:	51 f7       	brne	.-44     	; 0xb6 <TxChar_Encoded+0x60>
		else if(tmp == 0x01)
		{
			dataCodes[i+8] = 0xFF;
		}
	}
	UART_PutChar(0xAA);
  e2:	8a ea       	ldi	r24, 0xAA	; 170
  e4:	65 d0       	rcall	.+202    	; 0x1b0 <UART_PutChar>
	UART_PutChar(0xAA);
  e6:	8a ea       	ldi	r24, 0xAA	; 170
  e8:	63 d0       	rcall	.+198    	; 0x1b0 <UART_PutChar>
	UART_PutChar(address);
  ea:	81 2f       	mov	r24, r17
  ec:	61 d0       	rcall	.+194    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[0]);
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	5f d0       	rcall	.+190    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[1]);
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	5d d0       	rcall	.+186    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[2]);
  f6:	8b 81       	ldd	r24, Y+3	; 0x03
  f8:	5b d0       	rcall	.+182    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[3]);
  fa:	8c 81       	ldd	r24, Y+4	; 0x04
  fc:	59 d0       	rcall	.+178    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[4]);
  fe:	8d 81       	ldd	r24, Y+5	; 0x05
 100:	57 d0       	rcall	.+174    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[5]);
 102:	8e 81       	ldd	r24, Y+6	; 0x06
 104:	55 d0       	rcall	.+170    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[6]);
 106:	8f 81       	ldd	r24, Y+7	; 0x07
 108:	53 d0       	rcall	.+166    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[7]);
 10a:	88 85       	ldd	r24, Y+8	; 0x08
 10c:	51 d0       	rcall	.+162    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[8]);
 10e:	89 85       	ldd	r24, Y+9	; 0x09
 110:	4f d0       	rcall	.+158    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[9]);
 112:	8a 85       	ldd	r24, Y+10	; 0x0a
 114:	4d d0       	rcall	.+154    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[10]);
 116:	8b 85       	ldd	r24, Y+11	; 0x0b
 118:	4b d0       	rcall	.+150    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[11]);
 11a:	8c 85       	ldd	r24, Y+12	; 0x0c
 11c:	49 d0       	rcall	.+146    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[12]);
 11e:	8d 85       	ldd	r24, Y+13	; 0x0d
 120:	47 d0       	rcall	.+142    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[13]);
 122:	8e 85       	ldd	r24, Y+14	; 0x0e
 124:	45 d0       	rcall	.+138    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[14]);
 126:	8f 85       	ldd	r24, Y+15	; 0x0f
 128:	43 d0       	rcall	.+134    	; 0x1b0 <UART_PutChar>
	UART_PutChar(dataCodes[15]);
 12a:	88 89       	ldd	r24, Y+16	; 0x10
 12c:	41 d0       	rcall	.+130    	; 0x1b0 <UART_PutChar>
}
 12e:	c0 5f       	subi	r28, 0xF0	; 240
 130:	cd bf       	out	0x3d, r28	; 61
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	08 95       	ret

0000013a <main>:
void TxChar_Raw(unsigned char address, unsigned char data);
void TxChar_Encoded(unsigned char address, unsigned char data);

int main(void)
{
	DDRD |= 0b00100110;
 13a:	81 b3       	in	r24, 0x11	; 17
 13c:	86 62       	ori	r24, 0x26	; 38
 13e:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0b00100101;
 140:	82 b3       	in	r24, 0x12	; 18
 142:	85 62       	ori	r24, 0x25	; 37
 144:	82 bb       	out	0x12, r24	; 18
	
	//UART_init(51);		//1200bps
	UART_init(155);	//400bps
 146:	8b e9       	ldi	r24, 0x9B	; 155
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	27 d0       	rcall	.+78     	; 0x19a <UART_init>
 14c:	10 c0       	rjmp	.+32     	; 0x16e <main+0x34>
	//UART_init(311);		//200bps
	
	while(1)
	{	
		while(PIND & 0x10)
 14e:	c0 e3       	ldi	r28, 0x30	; 48
		{
			for(int i = 0; i <= 9; i++)
			{
				TxChar_Encoded(Tx1, i + '0');
 150:	6c 2f       	mov	r22, r28
 152:	81 e8       	ldi	r24, 0x81	; 129
 154:	80 df       	rcall	.-256    	; 0x56 <TxChar_Encoded>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	2f e9       	ldi	r18, 0x9F	; 159
 158:	86 e8       	ldi	r24, 0x86	; 134
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x22>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x2c>
 166:	00 00       	nop
 168:	cf 5f       	subi	r28, 0xFF	; 255
	
	while(1)
	{	
		while(PIND & 0x10)
		{
			for(int i = 0; i <= 9; i++)
 16a:	ca 33       	cpi	r28, 0x3A	; 58
 16c:	89 f7       	brne	.-30     	; 0x150 <main+0x16>
	UART_init(155);	//400bps
	//UART_init(311);		//200bps
	
	while(1)
	{	
		while(PIND & 0x10)
 16e:	84 99       	sbic	0x10, 4	; 16
 170:	ee cf       	rjmp	.-36     	; 0x14e <main+0x14>
 172:	10 c0       	rjmp	.+32     	; 0x194 <main+0x5a>
			{
				TxChar_Encoded(Tx1, i + '0');
				_delay_ms(500);
			}
		}
		while(PIND & 0x08)
 174:	c0 e3       	ldi	r28, 0x30	; 48
		{
			for(int i = 0; i <= 9; i++)
			{
				TxChar_Raw(Tx1, i + '0');
 176:	6c 2f       	mov	r22, r28
 178:	81 e8       	ldi	r24, 0x81	; 129
 17a:	5c df       	rcall	.-328    	; 0x34 <TxChar_Raw>
 17c:	2f e9       	ldi	r18, 0x9F	; 159
 17e:	86 e8       	ldi	r24, 0x86	; 134
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x48>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x52>
 18c:	00 00       	nop
 18e:	cf 5f       	subi	r28, 0xFF	; 255
				_delay_ms(500);
			}
		}
		while(PIND & 0x08)
		{
			for(int i = 0; i <= 9; i++)
 190:	ca 33       	cpi	r28, 0x3A	; 58
 192:	89 f7       	brne	.-30     	; 0x176 <main+0x3c>
			{
				TxChar_Encoded(Tx1, i + '0');
				_delay_ms(500);
			}
		}
		while(PIND & 0x08)
 194:	83 99       	sbic	0x10, 3	; 16
 196:	ee cf       	rjmp	.-36     	; 0x174 <main+0x3a>
 198:	ea cf       	rjmp	.-44     	; 0x16e <main+0x34>

0000019a <UART_init>:

#include "UART.h"

void UART_init(int baud)
{
	UBRRH = (unsigned char)(baud >> 8);
 19a:	29 2f       	mov	r18, r25
 19c:	33 27       	eor	r19, r19
 19e:	27 fd       	sbrc	r18, 7
 1a0:	3a 95       	dec	r19
 1a2:	22 b9       	out	0x02, r18	; 2
	UBRRL = (unsigned char)(baud);
 1a4:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = (1 << TXEN);
 1a6:	88 e0       	ldi	r24, 0x08	; 8
 1a8:	8a b9       	out	0x0a, r24	; 10
	//UCSRC = (1 << UPM1) | (1 << UCSZ1) | (1 << UCSZ0);
	UCSRC = (1 << UCSZ1) | (1 << UCSZ0);
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	83 b9       	out	0x03, r24	; 3
 1ae:	08 95       	ret

000001b0 <UART_PutChar>:
}

void UART_PutChar(unsigned char c)
{
	while(!(UCSRA & (1 << UDRE)));
 1b0:	5d 9b       	sbis	0x0b, 5	; 11
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <UART_PutChar>
	UDR = c; 
 1b4:	8c b9       	out	0x0c, r24	; 12
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
